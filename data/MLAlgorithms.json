{"name": "MLAlgorithms", "languages": ["Python", "Dockerfile"], "percentages": ["99.8", "0.1"], "imports": ["base", "mla neuralnet layers Layer ParamMixin", "nnet NeuralNet", "mla neuralnet optimizers Adadelta", "scipy spatial distance dist", "mla neuralnet initializations get_initializer", "mla neuralnet optimizers", "array array pyarray", "mla ensemble gbm GradientBoostingClassifier", "mla neuralnet layers Activation Dense Dropout", "sklearn metrics roc_auc_score", "mla linear_models LinearRegression", "mla neuralnet layers Activation Dense", "scipy stats", "os", "struct", "mla neuralnet activations", "mla svm kernerls RBF Linear", "autograd grad", "sys", "mla utils batch_iterator", "mla metrics metrics mean_squared_error", "mla neuralnet layers Layer PhaseMixin ParamMixin", "mla knn KNNClassifier", "mla datasets base", "mla ensemble RandomForestClassifier", "rnn", "mla ensemble base mse_criterion", "scipy spatial distance euclidean", "mla neuralnet layers PhaseMixin", "numpy np", "mla metrics distance l2_distance", "mla svm kernerls Linear", "random_forest RandomForestClassifier RandomForestRegressor", "convnet", "mla neuralnet layers Dense Activation Dropout Parameters", "mla neuralnet parameters Parameters", "setuptools setup find_packages", "sklearn cross_validation train_test_split", "mla metrics metrics mean_squared_error binary_crossentropy", "mla neuralnet regularizers L2", "mla ensemble base split split_dataset xgb_criterion", "numpy array int8 uint8 zeros", "time", "main", "mla metrics metrics get_metric", "sklearn model_selection train_test_split", "normalization", "numpy testing assert_almost_equal", "mla neuralnet constraints MaxNorm", "mla ensemble tree Tree", "mla neuralnet optimizers Adam", "scipy special expit", "collections Counter", "sklearn datasets make_classification", "autograd numpy np", "metrics mse logloss mae hinge binary_crossentropy", "mla metrics distance euclidean_distance", "division", "collections defaultdict", "mla neuralnet layers Layer get_activation ParamMixin", "mla pca PCA", "tqdm tqdm", "matplotlib pyplot plt", "os path", "mla neuralnet activations softmax", "mla kmeans KMeans", "random", "mla neuralnet NeuralNet", "basic", "lstm", "mla metrics base check_data validate_input", "codecs open", "seaborn sns", "mla neuralnet activations get_activation", "mla metrics mean_squared_error binary_crossentropy", "mla neuralnet activations sigmoid", "mla utils one_hot", "mla naive_bayes NaiveBayesClassifier", "mla knn KNNRegressor", "mla neuralnet loss get_loss", "mla linear_models LogisticRegression", "gym wrappers", "metrics", "pytest", "gym", "scipy linalg svd", "scipy stats multivariate_normal", "mla svm svm SVM", "autograd elementwise_grad", "mla ensemble base information_gain mse_criterion", "logging", "sklearn datasets make_regression", "mla base BaseEstimator", "math", "mla metrics accuracy"]}